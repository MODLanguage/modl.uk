!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.MODLConverter=o():e.MODLConverter=o()}(self,(function(){return(()=>{var e={43:function(e,o,t){var n,r;!function(i,u){"use strict";void 0===(r="function"==typeof(n=function(){var e=function(){},o="undefined",t=typeof window!==o&&typeof window.navigator!==o&&/Trident\/|MSIE /.test(window.navigator.userAgent),n=["trace","debug","info","warn","error"];function r(e,o){var t=e[o];if("function"==typeof t.bind)return t.bind(e);try{return Function.prototype.bind.call(t,e)}catch(o){return function(){return Function.prototype.apply.apply(t,[e,arguments])}}}function i(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function u(n){return"debug"===n&&(n="log"),typeof console!==o&&("trace"===n&&t?i:void 0!==console[n]?r(console,n):void 0!==console.log?r(console,"log"):e)}function l(o,t){for(var r=0;r<n.length;r++){var i=n[r];this[i]=r<o?e:this.methodFactory(i,o,t)}this.log=this.debug}function c(e,t,n){return function(){typeof console!==o&&(l.call(this,t,n),this[e].apply(this,arguments))}}function a(e,o,t){return u(e)||c.apply(this,arguments)}function s(e,t,r){var i,u=this,c="loglevel";function s(){var e;if(typeof window!==o&&c){try{e=window.localStorage[c]}catch(e){}if(typeof e===o)try{var t=window.document.cookie,n=t.indexOf(encodeURIComponent(c)+"=");-1!==n&&(e=/^([^;]+)/.exec(t.slice(n))[1])}catch(e){}return void 0===u.levels[e]&&(e=void 0),e}}"string"==typeof e?c+=":"+e:"symbol"==typeof e&&(c=void 0),u.name=e,u.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=r||a,u.getLevel=function(){return i},u.setLevel=function(t,r){if("string"==typeof t&&void 0!==u.levels[t.toUpperCase()]&&(t=u.levels[t.toUpperCase()]),!("number"==typeof t&&t>=0&&t<=u.levels.SILENT))throw"log.setLevel() called with invalid level: "+t;if(i=t,!1!==r&&function(e){var t=(n[e]||"silent").toUpperCase();if(typeof window!==o&&c){try{return void(window.localStorage[c]=t)}catch(e){}try{window.document.cookie=encodeURIComponent(c)+"="+t+";"}catch(e){}}}(t),l.call(u,t,e),typeof console===o&&t<u.levels.SILENT)return"No console available for logging"},u.setDefaultLevel=function(e){s()||u.setLevel(e,!1)},u.enableAll=function(e){u.setLevel(u.levels.TRACE,e)},u.disableAll=function(e){u.setLevel(u.levels.SILENT,e)};var f=s();null==f&&(f=null==t?"WARN":t),u.setLevel(f,!1)}var f=new s,p={};f.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var o=p[e];return o||(o=p[e]=new s(e,f.getLevel(),f.methodFactory)),o};var d=typeof window!==o?window.log:void 0;return f.noConflict=function(){return typeof window!==o&&window.log===f&&(window.log=d),f},f.getLoggers=function(){return p},f.default=f,f})?n.call(o,t,o,e):n)||(e.exports=r)}()},389:function(e,o,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0}),o.createJsonToModl=void 0;var r=n(t(43)),i=t(494),u=t(902);o.createJsonToModl=function(){return new l};var l=function(){function e(){}return e.prototype.objectToModl=function(e){var o=Array.isArray(e)?a("",e):function(e){return null===e?"null":"object"!=typeof e||Array.isArray(e)?p(e):f(e)}(e);return r.default.debug("Result    : ",o),o},e.prototype.stringToModl=function(e){r.default.debug("Converting: "+e);var o=JSON.parse(e);return this.objectToModl(o)},e}(),c=i.createUnicodeEscaper(),a=function(e,o){var t=c.escape(e);return u.isNonStringPrimitive(t)&&(t='"'+t+'"'),null===o?t+"=null":Array.isArray(o)?t+s(o):"object"==typeof o?t+"("+f(o)+")":function(e,o){var t=d(o);return null!==t?e+"="+t:null}(t,o)||t+"="+p(o)};function s(e){return"["+e.map(p).join(";")+"]"}function f(e){return"object"!=typeof e?d(e):Array.isArray(e)?s(e):Object.keys(e).map((function(o){return a(o,e[o])})).join(";")}function p(e){return Array.isArray(e)?s(e):"object"==typeof e?"("+f(e)+")":d(e)}var d=function(e){return null===e?"null":"string"==typeof e?"null"===e?"`null`":u.escapeAndQuote(e):"boolean"==typeof e?e?"true":"false":"number"==typeof e?Number.isInteger(e)?""+e:""+e.toExponential().replace("e+","E"):null}},494:(e,o)=>{"use strict";Object.defineProperty(o,"__esModule",{value:!0}),o.createUnicodeEscaper=void 0,o.createUnicodeEscaper=function(){return new t};var t=function(){function e(){}return e.prototype.escape=function(e){for(var o="",t=0;t<e.length;t++){var n=e.codePointAt(t);o+=(r=n)?r>=32&&r<=127?String.fromCodePoint(r):r>=1048576&&r<=1114111?"~u"+r.toString(16):8===r?"\\b":12===r?"\\f":10===r?"\\n":13===r?"\\r":9===r?"\\t":r>=65536&&r<=1048575||r>=4096&&r<=65535?"~u"+r.toString(16):r>=256&&r<=4095?"~u0"+r.toString(16):r>=16&&r<=255?"~u00"+r.toString(16):"~u000"+r.toString(16):"",n&&n>65535&&(t+=1)}var r;return o},e}()},902:(e,o,t)=>{"use strict";Object.defineProperty(o,"__esModule",{value:!0}),o.isNonStringPrimitive=o.escapeAndQuote=o.doubleQuoteIfNecessary=o.graveQuoteIfNecessary=o.isNumeric=o.shouldBeGraveQuoted=o.escapeGraves=void 0;var n=t(494);o.escapeGraves=function(e){return null!==e?e.replace(/`/g,"~`"):e},o.shouldBeGraveQuoted=new RegExp(".*[()\\[\\];{}:=].*"),o.isNumeric=new RegExp("^[+-]?[0-9]*.?[0-9]+(?:[Ee][+-]?[0-9]+)?$"),o.graveQuoteIfNecessary=function(e){return null!==e&&(o.shouldBeGraveQuoted.test(e)||""===e||o.isNumeric.test(e)&&"00"!==e&&"01"!==e&&"000"!==e||"true"===e||"false"===e||"null"===e)?"`"+e+"`":e},o.doubleQuoteIfNecessary=function(e){return null!==e&&e.includes("~`")?'"'+e+'"':e};var r=n.createUnicodeEscaper();o.escapeAndQuote=function(e){return null===e?e:o.doubleQuoteIfNecessary(o.graveQuoteIfNecessary(o.escapeGraves(r.escape(e))))},o.isNonStringPrimitive=function(e){return i.includes(e)||""+parseFloat(e)===e};var i=["true","false","null"]}},o={};function t(n){var r=o[n];if(void 0!==r)return r.exports;var i=o[n]={exports:{}};return e[n].call(i.exports,i,i.exports,t),i.exports}var n={};return(()=>{"use strict";var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.jsonToModl=void 0;var o=t(389);e.jsonToModl=o.createJsonToModl()})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,