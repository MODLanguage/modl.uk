<h1>Minimal&nbsp;Object Description&nbsp;Language</h1>
<p>
  MODL (<em>sounds like "doddle"</em>) is a compact data serialisation language well suited to storing objects in DNS TXT records.
</p>
<p>
  Let's&nbsp;take a look at an example MODL object, formatted for readability:
</p>
<%=compare_language("objects",
      [
        "name=ABC Company Ltd;
telephone[
  (
    number=+441234567890;
    label=Customer Service
  );
  (
    number=+441234098765;
    label=Accounts
  );
  number=+441234000000  
];
address(
  lines[
    1 North Street;
    Manchester
  ];
  postcode=M4 5EN
)",
'{
  "name": "ABC Company Ltd",
  "telephone": [
    {
      "number": "+441234567890",
      "label": "Customer Service"
    },
    {
      "number": "+441234098765",
      "label": "Accounts"
    },
    {
      "number": "+441234000000"
    }
  ],
  "address": {
    "lines": [
      "1 North Street",
      "Manchester"
    ],
    "postcode": "M4 5EN"
  }
}',nil
],500,true,false)%>
<p>
  Click the JSON tab to see the JSON equivalent.
</p>
<div class="sectionh2" id="builing-blocks">
<h2 id="building-blocks-title">Similarities with JSON</h2>
  <p>
    Like JSON and most other data serialisation languages, MODL is made up of:
  </p>
  <ul>
    <li>values like <code>a</code>, <code>1</code>, <code>true</code>, <code>false</code>, <code>null</code></li>
    <li>pairs consisting of a key and value</li>
    <li>maps containing pairs</li>
    <li>arrays containing values</li>
  </ul>
  <p>
    MODL is designed for character efficient data serialisation and does not allow comments.
  </p>
</div>
<div class="sectionh2" id="subtle-differences">
<h2>Subtle differences to JSON</h2>
  <div>
    <p>
      MODL has the following subtle differences when compared to JSON:
    </p>
    <ul>
      <li>MODL uses an equals (<code>=</code>) to split a key and value, whereas JSON uses a colon (<code>:</code>)</li>
      <li>MODL uses a semi-colon (<code>;</code>) as a separator, whereas JSON uses a comma (<code>,</code>)</li>
      <li>It is not necessary to quote keys or values – types are inferred</li>
      <li>Values can be quoted using <code>`graves`</code> as well as <code>"quotes"</code></li>
    </ul>
  </div>
</div>
<div class="sectionh2" id="significant-differences">
<h2 id="differences-title">Significant differences to JSON</h2>
  <p>
    MODL has the following significant differences when compared to JSON, in the pursuit of character-efficiency:
  </p>
  <ul>
    <li>
      It is not necessary to split a key and value with <code>=</code> if the value is a map or an array, e.g:<br><code>colours[red;blue]</code> and <code>colours=[red;blue]</code> are both valid MODL
    </li>
    <li>
      Pairs can be expressed outside of a map at the top level, where they are considered pairs in the same map
    </li>
    <li>
      Pairs can be expressed as values in an array, where each pair is considered an individual map with a single pair
    </li>
  </ul>
</div>
<div class="sectionh2" id="learn-more">
  <h2 id="learn-more-title">Learn More</h2>
  <p>
    To experiment with MODL use the <em>MODL Playground</em>, to get started on your own project take a look at the <em>Developer Libraries</em>. For detailed information read the <em>Technical Specification</em>. 
  </p>
  <div class="row" id="button-row">
    <div class="col-4 col-s-4">
      <a href="playground" class="button-link">
        <div class="button first">      
          View Playground
        </div>
      </a>
    </div>
    <div class="col-4 col-s-4">
      <a href="libraries" class="button-link">
        <div class="button second">      
          View Developer Libraries
        </div>
      </a>
    </div>  
    <div class="col-4 col-s-4">
      <a href="specification" class="button-link">
        <div class="button third">
          View Technical Specification
        </div>
      </a>      
    </div>
    <div>
      &nbsp;
    </div>
  </div>
</div>
