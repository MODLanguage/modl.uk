<h1 id="title">MODL Specification</h1>
<div id="intro-and-toc" class="row">
  <div id="toc" class="col-4" style="background-color:#eee;float:right;">"
  </div>
  <div class="col-8">
    <div class="sectionh2 toc-content toc-content1 intro" id="introduction" style="border-top:0px;">
      <h2 id="introduction-title">Introduction</h2>
      <p>
        MODL is a data serialisation language with the goal of describing objects in as few characters as possible. MODL has particular application in DNS TXT records because:
      </p>
      <ul>
        <li>it is character-efficient</li>
        <li>it is easily minified</li>
        <li>keys and values do not need to be <code>"quoted"</code> – avoiding DNS storage issues</li>
      </ul>
      <p>
        Until now, developers have rolled their own methods of storing data in DNS TXT records, presenting significant limitations and a barrier to entry for those looking to store data in DNS. MODL aims to standardise data storage in DNS TXT.
      </p>
      <div class="sectionh3" id="status">
        <h3 id="status-title">Status</h3>
        <p>
          MODL was first published on 25th March 2018,  we do not anticipate any further changes to the grammar or interpreter rules.
        </p>
      </div>
      <div class="sectionh3" id="rules">
        <h3 id="rules-title">Rules</h3>
        <ol>
          <li>MODL is case-sensitive</li>
          <li>Whitespace means space (<code>0x20</code>) or tab (<code>0x09</code>).</li>
          <li>Newline means LF (<code><0x0A</code>) or CRLF (<code>0x0D0A</code>).</li>
          <li>MODL ignores all leading and trailing whitespace.</li>
          <li>MODL files must be valid UTF-8 encoded Unicode documents.</li>
        </ol>
      </div>
      <div class="sectionh3" id="authors">
        <h3 id="authors-title">Authors</h3>
        <p>
          MODL was created by <a href="http://www.github.com/elliottinvent" target="_blank">Elliott Brown</a> <%=link_icon("external")%>, <a href="http://www.github.com/alexdalitz" target="_blank">Alex Dalitz</a> <%=link_icon("external")%> and <a href="https://github.com/twalmsley" target="_blank">Tony Walmsley</a> <%=link_icon("external")%>.
        </p>
      </div>
    </div>
  </div>
</div>
<div class="toc-content toc-content2">
  <div class="sectionh2" id="machine-diagrams">
  <h2 id="machine-diagrams-title">Machine Diagrams</h2>
    <p>
      MODL can be explained using machine diagrams (in the same style as <a href="http://www.json.org" target="_blank">JSON</a> <%=link_icon("external")%>):      
    </p>
    <img src="/images/machine-diagram.png" id="machine-diagrams-image" style="max-width:700px;">
  </div>
  <div class="sectionh2" id="values">
  <h2 id="values-title">Values</h2>
    <p>
      The values listed in the machine diagrams above are described precisely below:
    </p>
    <div class="sectionh3" id="map">
      <h3 id="map-title">Map</h3>
      <p>
        A map is known in other languages as a hash table, object, record, struct, dictionary, keyed list, or associative array. A map begins with left parenthesis <code>(</code> and ends with right parenthesis <code>)</code>, it contains zero or more <code>pairs</code> separated by a semi-colon (<code>;</code>).
      </p>
   <%=compare_language("map-example",
        ["(
  a=1;
  b=2;
  c=3
)",
    '{
  "a" : 1,
  "b" : 2,
  "c" : 3
}',nil
    ],nil,true,true)
    %>      
    </div>
    <div class="sectionh3" id="array">
      <h3 id="array-title">Array</h3>
      <p>
        Arrays in MODL will be familiar to most – beginning with a left square bracket <code>[</code> and ending with a right square bracket <code>]</code> containing zero or more values separated by a semi-colon <code>;</code>. Array items can be of any data type and data types can be mixed.
      </p>
   <%=compare_language("array-example",
        ["[
  1;
  2;
  3
]",
    '[
  1,
  2,
  3
]',nil
    ],nil,true,true)
    %>      

    </div>
    <div class="sectionh3" id="pair">
      <h3 id="pair-title">Pair</h3>
      <p>
        Pairs are the primary building block of MODL and consist of a value assigned to a key. They can be used in a number of ways to aid character efficiency. Orphan pairs (not within a map) are allowed for character efficiency and are converted into a map when parsed.
      </p>
      <h4 id="standard-pair-title">Standard Pair</h4>
      <p>
        A standard pair is a key and a value separated by equals (<code>=</code>):
      </p>
<%=compare_language("standard-pair-example",
        ["(
  a=1
)",
    '{
  "a" : 1
}',nil
    ],nil,true,true)
    %>           
      <h4 id="map-pair-title">Map Pair</h4>
      <p>
        When assigning a map to a key, we can omit <code>=</code> since the left parenthesis separates the key from the map contents:
      </p>
<%=compare_language("map-pair-example",
        ["(
  a(
    b=1
  )
)",
    '{
  "a" : {
    "b" : 1
  }
}',nil
    ],nil,true,true)%>      
      <h4 id="array-pair-title">Array Pair</h4>
      <p>
        When assigning an array to a key, we can omit <code>=</code> since the left square bracket separates the key from the array contents:
      </p>
<%=compare_language("array-pair-example",
        ["(
  a[
    1;
    2
  ]
)",
    '{
  "a" : [
    1,
    2
  ]
}',nil
    ],nil,true,true)%>         
      <h4 id="orphan-pairs">Orphan Pairs</h4>
      <p>
        An orphan pair is one that is expressed outside of a map, either at the top level of an object or as an array value.
      </p>
      <h5>At the top level</h5>
      <p>
        Pairs can be expressed outside of a map at the top level and they are automatically considered pairs in the same map:
      </p>
<%=compare_language("orphan-pairs-top-level",
        ["
a=1;
b=2;
c=3",
    '{
  "a" : 1,
  "b" : 2,
  "c" : 3
}',nil
    ],115,true,true)%>

      <h5>As array values</h5>
      <p>
        Pairs can be expressed as values in an array, where they are automatically considered individual maps each with one pair:
      </p>
    <%=compare_language("orphan-pairs-array-example",
        [
          "[
  a=1;
  b=2;
  c=3
]",
    '[
  {
    "a" : 1
  },
  {
    "b" : 2
  },
  {
    "c" : 3
  }
]',nil
    ],162,true,true)
    %>
    </div>
    <div class="sectionh3" id="number">
    <h3 id="number-title">Number</h3>
      <p>
        Numbers in MODL are the same as numbers in JSON <a href="https://tools.ietf.org/html/rfc7159#section-6" target="_blank">view RFC</a> <%=link_icon("external")%>
      </p>
    </div>
    <div class="sectionh3" id="string">
    <h3 id="string-title">String</h3>
      <p>
        Strings in MODL are the same as strings in JSON <a href="https://tools.ietf.org/html/rfc7159#section-7" target="_blank"> view RFC</a> <%=link_icon("external")%>, with the exception that they can also be unquoted and <code>`graved`</code>.
      </p>
    </div>
    <div class="sectionh3" id="boolean">
    <h3 id="boolean-title">Boolean</h3>
      <p>
        True is represented using <code>true</code> and false is represented using <code>false</code> – in both cases, the same as JSON.
      </p>
    </div>
    <div class="sectionh3" id="null">
      <h3 id="null-title">Null</h3>
      <p>
        Null is represented using <code>null</code>, the same as JSON.
      </p>
    </div>
  </div>
  <div class="sectionh2" id="type-inference">
  <h2 id="type-inference-title">Type Inference</h2>
  <p>
    MODL infers the type of a value, to set a number to a string it can be quoted. For example:
  </p>
  <%=compare_language("type-inference-example",
      [
        "(
  force_number_as_string=\"1\"
)",
  '{
  "force_number_as_string": "1"
}',nil
  ],nil,true,true)
  %> 
  </div>
  <div class="sectionh2" id="quoting-values">
    <h2 id="quoting-values-title">Quoting Values</h2>
    <p>
      Values can be quoted using double quotes (<code>"</code>) or DNS-friendly graves (<code>`</code>), for example:
    </p>
  <%=compare_language("quoting-values-example",
      [
        "(
  force_number_as_string=\"1\";
  force_another_number_as_string=`2`
)",
  '{
  "force_number_as_string": "1",
  "force_another_number_as_string": "2",
}',nil
  ],nil,true,true)
  %> 
  </div> 
  <div class="sectionh2" id="escaping">
    <h2 id="escaping-title">Escaping</h2>
    <p>
      Like JSON, the backslash (<code>\</code>) can be used to escape characters. In addition, the DNS-friendly tilde (<code>~</code>) can also be used as an escape character. For character efficiency, it's usually better to quote values that include more than one reserved character. For example:
    </p>
  <%=compare_language("escaping-values-example",
      [
        "(
  include_one_reserved_char = we won :\\);
  include_many_reserved_chars = \"this (that [the other]\"
)",
  '{
  "include_one_reserved_char": "we won :)",
  "include_many_reserved_chars": "this (that [the other])"
}',nil
  ],nil,true,true)
  %> 
    <p>
      In MODL tilde (<code>~</code>) is equivalent to backslash (<code>\</code>). Backslash can be used to escape tilde and tilde can be used to escape backslash. Tilde can be used to escape tilde. Backslash can be used to escape backslash.
    </p>
  </div>
  <div class="sectionh2" id="encoding-for-dns">
  <h2 id="encoding-for-dns">Encoding For DNS</h2>
    <p>
      MODL is not limited to <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank">ASCII characters</a> <%=link_icon("external")%> but some storage media are (e.g. DNS TXT records). Non-ASCII characters can be expressed in ASCII MODL in two ways:
    </p>
    <div class="sectionh3" id="hex-values">
    <h3 id="hex-values-title">Hex Values</h3>
      <p>
        Any unicode character represented by four hex digits can be used in MODL in the same way as JSON:
      </p>
    </p>
  <%=compare_language("hex-values-example",
      [
        "(
  symbol=\\u03C0
)",
  '{
  "symbol": "π"
}',nil
  ],nil,true,true)
  %>       
      <p>
        A DNS-friendly version is also available using the tilde (<code>~</code>) in place of the back slash (<code>\</code>):
      </p>
  <%=compare_language("hex-values-example2",
      [
        "(
  symbol=~u03C0
)",
  '{
  "symbol": "π"
}',nil
  ],nil,true,true)
  %>           </div>
    <div class="sectionh3" id="punycode">
    <h3 id="punycode-title">Punycode</h3>
      <p>
       For more complex strings, it's more efficient to <a href="https://en.wikipedia.org/wiki/Punycode" target="_blank">Punycode</a> <%=link_icon("external")%> the string before storing it in an ASCII system (e.g. DNS), then decode the string before parsing. Any Unicode character can be punycode encoded, providing ASCII support for almost every language on Earth and symbols like emojis.
      </p>
      <p>
        In the Russian language object below, the <code>name</code> field uses the punycode conversion of пример (English translation: 'Example') and the <code>department</code> uses the punycode conversion of обслуживание клиентов (English: 'Customer Service'):
      </p>
      <%=code_with_note('code-punycode1','
        xn--name=;department= -7wotvc6cpbv3bpcc5dyaik8chwph4bd0d1c4a',
      'An example DNS TXT record string using punycode to represent non-ASCII characters.',nil,true,false)
      %>
      <p>
      If decoded before parsing, the resulting MODL object looks like this:
      </p>
<%=compare_language("code-punycode-2",
      [
        "name=пример;
department=обслуживание клиентов",
  '{
    "name": "пример",
    "department": "обслуживание клиентов"
}',nil
  ],90,true,true)
  %>   
    </div>
  </div>
  <div class="sectionh2" id="reserved-characters">
  <h2 id="reserved-characters-title">Reserved Characters</h2>
    <p>
      For character efficiency, you should use a <a href="#quoting-values">quoted or graved string</a> <%=link_icon("up")%> if a value includes two or more reserved characters, otherwise use an escape character (<code>\</code> or <code>~</code>) for a single reserved character. The following characters have special meaning in MODL:
    </p>
    <ul class="reserved">
      <li>
        <strong>Brackets</strong>: The left bracket <code>(</code> indicates the start of a <a href="#map">map</a> <%=link_icon("up")%>, the right bracket <code>)</code> indicates the end.
      </li>
      <li>
        <strong>Square Brackets</strong>: The left square bracket <code>[</code> indicates the start of an <a href="#array">array</a> <%=link_icon("up")%>, the right square bracket <code>]</code> indicates the end.
      </li>
      <li>
        <strong>Semi-colon</strong> <code>;</code> is used in a <a href="#map">map</a> <%=link_icon("up")%> to separate <a href="#pair">pairs</a> <%=link_icon("up")%> and used in an <a href="#array">array</a> <%=link_icon("up")%> to separate items.
      </li>
      <li>
        <strong>Grave accents and double quotes</strong> (<code>`</code> and <code>"</code> respectively) are used for <a href="#quoting-values">quoting values</a> <%=link_icon("up")%>.
      </li>
      <li>
        <strong>Backslash and tilde</strong> (<code>\</code> and <code>~</code> respectively) are <a href="#escaping">escape characters</a> and can be used before any reserved character to escape its reserved use. To use a backlash or tilde in a MODL object, simply use two: <code>\\</code>, <code>~~</code>, <code>\~</code> or <code>~\</code>.
      </li>
    </ul>
  </div>  
</div>
<script>
var h3toc = true;
var h4toc = true;
</script>
<script src="/javascripts/toc-footer.js"></script>
<script>$( '#toc' ).html(ToC);</script>